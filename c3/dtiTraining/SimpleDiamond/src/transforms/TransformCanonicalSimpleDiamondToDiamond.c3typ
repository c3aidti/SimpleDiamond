
/**
* 
*/

/**
* A Canonical Transform, or in short a Transform, is a mapping between a Canonical and an Entity Type. In current example, this Transform defines the relationship between a canonical ({@link CanonicalSimpleBulb}) and a persistable C3 target Type ({@link SimpleBulb}).
*/

/**
* Here are more details inside of implementation:
* 1. mixes Diamond - The Transform will always mixes its persistable C3 target Type, which is "Diamond" in this example.
* 2. transforms CanonicalSimpleDiamond - The Transform will always transforms the Canonical, which is "CanonicalSimpleDiamond" in this example.
* 3. id: ~ expression "id" - (1) id represents which field will be transformed into the Diamond type. And also, since the Diamond is a persistable type, the "id" is actually the inherited field from {@link Persistable} type in SimpleBulb type; (2) ~ expression "id" represents that data is every entry which is coming from the field "id" of SimpleDiamond.csv file.
* 4. if you want to assign constant, you can assign things like: `field: ~ express {id: "'constant'"}`. In this example, you are assigning string 'constant' to every entry in field.
* 5. the expression function could be so fancy, more usage details at {@link ExpressionEngineFunction}.
*/

type TransformCanonicalSimpleDiamondToDiamond mixes Diamond transforms CanonicalSimpleDiamond {
 
 id: ~ expression "id"
 caratMeasurement: ~ expression "carat"
 cutLevel: ~ expression "cut"
 colorLevel: ~ expression "color"
 clarityLevel: ~ expression "clarity"
 depthLevel: ~ expression "depth"
 tableLevel: ~ expression "table"
 priceDollar: ~ expression "price"
 xAxis: ~ expression "x"
 yAxis: ~ expression "y"
 zAxis: ~ expression "z"

}
